// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/net/impl/CronetLibraryLoader

#ifndef android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader[];
const char kClassPath_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader[] =
    "android/net/connectivity/org/chromium/net/impl/CronetLibraryLoader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader,
      &g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace cronet {

static void JNI_CronetLibraryLoader_CronetInitOnInitThread(JNIEnv* env);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MJyiCQCu(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CronetLibraryLoader_CronetInitOnInitThread(env);
}

static base::android::ScopedJavaLocalRef<jstring> JNI_CronetLibraryLoader_GetCronetVersion(JNIEnv*
    env);

JNI_BOUNDARY_EXPORT jstring Java_android_net_connectivity_J_N_Mo_1Vqdle(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CronetLibraryLoader_GetCronetVersion(env).Release();
}

static void JNI_CronetLibraryLoader_SetMinLogLevel(JNIEnv* env, jint loggingLevel);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MdZpiqDR(
    JNIEnv* env,
    jclass jcaller,
    jint loggingLevel) {
  return JNI_CronetLibraryLoader_SetMinLogLevel(env, loggingLevel);
}


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_ensureInitializedFromNative0(nullptr);
static void Java_CronetLibraryLoader_ensureInitializedFromNative(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "ensureInitializedFromNative",
          "()V",
&g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_ensureInitializedFromNative0);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_getBaseFeatureOverrides0(nullptr);
static base::android::ScopedJavaLocalRef<jbyteArray>
    Java_CronetLibraryLoader_getBaseFeatureOverrides(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBaseFeatureOverrides",
          "()[B",
&g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_getBaseFeatureOverrides0);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_getDefaultUserAgent0(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_CronetLibraryLoader_getDefaultUserAgent(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getDefaultUserAgent",
          "()Ljava/lang/String;",
&g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_getDefaultUserAgent0);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_setNetworkThreadPriorityOnNetworkThread1(nullptr);
static void Java_CronetLibraryLoader_setNetworkThreadPriorityOnNetworkThread(JNIEnv* env,
    JniIntWrapper priority) {
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setNetworkThreadPriorityOnNetworkThread",
          "(I)V",
&g_android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_setNetworkThreadPriorityOnNetworkThread1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(priority));
}

}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI
