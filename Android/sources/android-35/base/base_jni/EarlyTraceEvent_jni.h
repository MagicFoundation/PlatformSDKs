// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/base/EarlyTraceEvent

#ifndef android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI
#define android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_base_EarlyTraceEvent[];
const char kClassPath_android_net_connectivity_org_chromium_base_EarlyTraceEvent[] =
    "android/net/connectivity/org/chromium/base/EarlyTraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz_defined
#define android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_base_EarlyTraceEvent,
      &g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong id,
    jlong timeNanos);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mhdyh0WN(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id,
    jlong timeNanos) {
  return JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(env,
      base::android::JavaParamRef<jstring>(env, name), id, timeNanos);
}

static void JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(JNIEnv* env, jlong id,
    jlong timeNanos);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MmH1F_1vE(
    JNIEnv* env,
    jclass jcaller,
    jlong id,
    jlong timeNanos) {
  return JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(env, id, timeNanos);
}

static void JNI_EarlyTraceEvent_RecordEarlyBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MaQDSkvN(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyBeginEvent(env, base::android::JavaParamRef<jstring>(env,
      name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyEndEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MdiVY7jZ(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyEndEvent(env, base::android::JavaParamRef<jstring>(env,
      name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MvrncgGn(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(env,
      base::android::JavaParamRef<jstring>(env, name), timeNanos, threadId, threadMillis);
}

static void JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MubkdyjU(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  return JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(env,
      base::android::JavaParamRef<jstring>(env, name), timeNanos, threadId, threadMillis);
}


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag0(nullptr);
static jboolean Java_EarlyTraceEvent_getBackgroundStartupTracingFlag(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBackgroundStartupTracingFlag",
          "()Z",
&g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_getBackgroundStartupTracingFlag0);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag1(nullptr);
static void Java_EarlyTraceEvent_setBackgroundStartupTracingFlag(JNIEnv* env, jboolean enabled) {
  jclass clazz = android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setBackgroundStartupTracingFlag",
          "(Z)V",
&g_android_net_connectivity_org_chromium_base_EarlyTraceEvent_setBackgroundStartupTracingFlag1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

}  // namespace android
}  // namespace base

#endif  // android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI
