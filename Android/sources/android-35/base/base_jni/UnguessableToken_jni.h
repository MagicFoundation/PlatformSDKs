// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/base/UnguessableToken

#ifndef android_net_connectivity_org_chromium_base_UnguessableToken_JNI
#define android_net_connectivity_org_chromium_base_UnguessableToken_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_base_UnguessableToken[];
const char kClassPath_android_net_connectivity_org_chromium_base_UnguessableToken[] =
    "android/net/connectivity/org/chromium/base/UnguessableToken";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_base_UnguessableToken_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_base_UnguessableToken_clazz_defined
#define android_net_connectivity_org_chromium_base_UnguessableToken_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_UnguessableToken_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_base_UnguessableToken,
      &g_android_net_connectivity_org_chromium_base_UnguessableToken_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_UnguessableToken_create2(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_UnguessableToken_create(JNIEnv* env, jlong
    high,
    jlong low) {
  jclass clazz = android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(JJ)Landroid/net/connectivity/org/chromium/base/UnguessableToken;",
          &g_android_net_connectivity_org_chromium_base_UnguessableToken_create2);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, high, low);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_UnguessableToken_getHighForSerialization0(nullptr);
static jlong Java_UnguessableToken_getHighForSerialization(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getHighForSerialization",
          "()J",
          &g_android_net_connectivity_org_chromium_base_UnguessableToken_getHighForSerialization0);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_UnguessableToken_getLowForSerialization0(nullptr);
static jlong Java_UnguessableToken_getLowForSerialization(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getLowForSerialization",
          "()J",
          &g_android_net_connectivity_org_chromium_base_UnguessableToken_getLowForSerialization0);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_UnguessableToken_parcelAndUnparcelForTesting0(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_UnguessableToken_parcelAndUnparcelForTesting(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_base_UnguessableToken_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "parcelAndUnparcelForTesting",
          "()Landroid/net/connectivity/org/chromium/base/UnguessableToken;",
&g_android_net_connectivity_org_chromium_base_UnguessableToken_parcelAndUnparcelForTesting0);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // android_net_connectivity_org_chromium_base_UnguessableToken_JNI
