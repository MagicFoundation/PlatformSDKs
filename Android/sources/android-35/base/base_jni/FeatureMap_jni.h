// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/base/FeatureMap

#ifndef android_net_connectivity_org_chromium_base_FeatureMap_JNI
#define android_net_connectivity_org_chromium_base_FeatureMap_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static base::android::ScopedJavaLocalRef<jstring> JNI_FeatureMap_GetFieldTrialParamByFeature(JNIEnv*
    env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName);

JNI_BOUNDARY_EXPORT jstring Java_android_net_connectivity_J_N_Mc9lzSch(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName,
    jstring paramName) {
  return JNI_FeatureMap_GetFieldTrialParamByFeature(env, featureMap,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName)).Release();
}

static jboolean JNI_FeatureMap_GetFieldTrialParamByFeatureAsBoolean(JNIEnv* env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jboolean defaultValue);

JNI_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_M_1oXU5o3(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName,
    jstring paramName,
    jboolean defaultValue) {
  return JNI_FeatureMap_GetFieldTrialParamByFeatureAsBoolean(env, featureMap,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static jdouble JNI_FeatureMap_GetFieldTrialParamByFeatureAsDouble(JNIEnv* env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jdouble defaultValue);

JNI_BOUNDARY_EXPORT jdouble Java_android_net_connectivity_J_N_MbvuHUnn(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName,
    jstring paramName,
    jdouble defaultValue) {
  return JNI_FeatureMap_GetFieldTrialParamByFeatureAsDouble(env, featureMap,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static jint JNI_FeatureMap_GetFieldTrialParamByFeatureAsInt(JNIEnv* env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jint defaultValue);

JNI_BOUNDARY_EXPORT jint Java_android_net_connectivity_J_N_MjllYAze(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName,
    jstring paramName,
    jint defaultValue) {
  return JNI_FeatureMap_GetFieldTrialParamByFeatureAsInt(env, featureMap,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_FeatureMap_GetFlattedFieldTrialParamsForFeature(JNIEnv* env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName);

JNI_BOUNDARY_EXPORT jobjectArray Java_android_net_connectivity_J_N_MouNn1zW(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName) {
  return JNI_FeatureMap_GetFlattedFieldTrialParamsForFeature(env, featureMap,
      base::android::JavaParamRef<jstring>(env, featureName)).Release();
}

static jboolean JNI_FeatureMap_IsEnabled(JNIEnv* env, jlong featureMap,
    const base::android::JavaParamRef<jstring>& featureName);

JNI_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MQjWFQBa(
    JNIEnv* env,
    jclass jcaller,
    jlong featureMap,
    jstring featureName) {
  return JNI_FeatureMap_IsEnabled(env, featureMap, base::android::JavaParamRef<jstring>(env,
      featureName));
}


}  // namespace android
}  // namespace base

#endif  // android_net_connectivity_org_chromium_base_FeatureMap_JNI
