// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/base/CommandLine

#ifndef android_net_connectivity_org_chromium_base_CommandLine_JNI
#define android_net_connectivity_org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_CommandLine_AppendSwitch(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    switchString);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MtAJxOnD(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString) {
  return JNI_CommandLine_AppendSwitch(env, base::android::JavaParamRef<jstring>(env, switchString));
}

static void JNI_CommandLine_AppendSwitchWithValue(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& switchString,
    const base::android::JavaParamRef<jstring>& value);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MNKGeq4d(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString,
    jstring value) {
  return JNI_CommandLine_AppendSwitchWithValue(env, base::android::JavaParamRef<jstring>(env,
      switchString), base::android::JavaParamRef<jstring>(env, value));
}

static void JNI_CommandLine_AppendSwitchesAndArguments(JNIEnv* env, const
    base::android::JavaParamRef<jobjectArray>& array);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MRGgm0Xm(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray array) {
  return JNI_CommandLine_AppendSwitchesAndArguments(env,
      base::android::JavaParamRef<jobjectArray>(env, array));
}

static base::android::ScopedJavaLocalRef<jstring> JNI_CommandLine_GetSwitchValue(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& switchString);

JNI_BOUNDARY_EXPORT jstring Java_android_net_connectivity_J_N_MpKDqvJc(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString) {
  return JNI_CommandLine_GetSwitchValue(env, base::android::JavaParamRef<jstring>(env,
      switchString)).Release();
}

static base::android::ScopedJavaLocalRef<jobjectArray> JNI_CommandLine_GetSwitchesFlattened(JNIEnv*
    env);

JNI_BOUNDARY_EXPORT jobjectArray Java_android_net_connectivity_J_N_M0RvGqaj(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_CommandLine_GetSwitchesFlattened(env).Release();
}

static jboolean JNI_CommandLine_HasSwitch(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    switchString);

JNI_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MPiiSiez(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString) {
  return JNI_CommandLine_HasSwitch(env, base::android::JavaParamRef<jstring>(env, switchString));
}

static void JNI_CommandLine_Init(JNIEnv* env, const base::android::JavaParamRef<jobjectArray>&
    args);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mp_1Bf7qr(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray args) {
  return JNI_CommandLine_Init(env, base::android::JavaParamRef<jobjectArray>(env, args));
}

static void JNI_CommandLine_RemoveSwitch(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    switchString);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MrLIIZN_1(
    JNIEnv* env,
    jclass jcaller,
    jstring switchString) {
  return JNI_CommandLine_RemoveSwitch(env, base::android::JavaParamRef<jstring>(env, switchString));
}


#endif  // android_net_connectivity_org_chromium_base_CommandLine_JNI
