// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/base/TraceEvent

#ifndef android_net_connectivity_org_chromium_base_TraceEvent_JNI
#define android_net_connectivity_org_chromium_base_TraceEvent_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_base_TraceEvent[];
const char kClassPath_android_net_connectivity_org_chromium_base_TraceEvent[] =
    "android/net/connectivity/org/chromium/base/TraceEvent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_base_TraceEvent_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_base_TraceEvent_clazz_defined
#define android_net_connectivity_org_chromium_base_TraceEvent_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_TraceEvent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_base_TraceEvent,
      &g_android_net_connectivity_org_chromium_base_TraceEvent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_TraceEvent_AddViewDump(JNIEnv* env, jint id,
    jint parentId,
    jboolean isShown,
    jboolean isDirty,
    const base::android::JavaParamRef<jstring>& className,
    const base::android::JavaParamRef<jstring>& resourceName,
    jlong activityProtoPtr);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M41oo8U_1(
    JNIEnv* env,
    jclass jcaller,
    jint id,
    jint parentId,
    jboolean isShown,
    jboolean isDirty,
    jstring className,
    jstring resourceName,
    jlong activityProtoPtr) {
  return JNI_TraceEvent_AddViewDump(env, id, parentId, isShown, isDirty,
      base::android::JavaParamRef<jstring>(env, className),
      base::android::JavaParamRef<jstring>(env, resourceName), activityProtoPtr);
}

static void JNI_TraceEvent_Begin(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M_1DzpvzS(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg) {
  return JNI_TraceEvent_Begin(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg));
}

static void JNI_TraceEvent_BeginToplevel(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    target);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MXRoygkr(
    JNIEnv* env,
    jclass jcaller,
    jstring target) {
  return JNI_TraceEvent_BeginToplevel(env, base::android::JavaParamRef<jstring>(env, target));
}

static void JNI_TraceEvent_BeginWithIntArg(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    name,
    jint arg);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MeTMqUQM(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jint arg) {
  return JNI_TraceEvent_BeginWithIntArg(env, base::android::JavaParamRef<jstring>(env, name), arg);
}

static void JNI_TraceEvent_End(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg,
    jlong flow);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MI7UuZsh(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg,
    jlong flow) {
  return JNI_TraceEvent_End(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg), flow);
}

static void JNI_TraceEvent_EndToplevel(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    target);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M3E_1y9Z0(
    JNIEnv* env,
    jclass jcaller,
    jstring target) {
  return JNI_TraceEvent_EndToplevel(env, base::android::JavaParamRef<jstring>(env, target));
}

static void JNI_TraceEvent_FinishAsync(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    name,
    jlong id);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mh7vu_1jl(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id) {
  return JNI_TraceEvent_FinishAsync(env, base::android::JavaParamRef<jstring>(env, name), id);
}

static void JNI_TraceEvent_InitViewHierarchyDump(JNIEnv* env, jlong id,
    const base::android::JavaParamRef<jobject>& list);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MfLE3FDi(
    JNIEnv* env,
    jclass jcaller,
    jlong id,
    jobject list) {
  return JNI_TraceEvent_InitViewHierarchyDump(env, id, base::android::JavaParamRef<jobject>(env,
      list));
}

static void JNI_TraceEvent_Instant(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    const base::android::JavaParamRef<jstring>& arg);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MSA5B7ai(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jstring arg) {
  return JNI_TraceEvent_Instant(env, base::android::JavaParamRef<jstring>(env, name),
      base::android::JavaParamRef<jstring>(env, arg));
}

static void JNI_TraceEvent_InstantAndroidIPC(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong durMs);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M0flZQsx(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong durMs) {
  return JNI_TraceEvent_InstantAndroidIPC(env, base::android::JavaParamRef<jstring>(env, name),
      durMs);
}

static void JNI_TraceEvent_InstantAndroidToolbar(JNIEnv* env, jint blockReason,
    jint allowReason,
    jint snapshotDiff);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MWQIBkUV(
    JNIEnv* env,
    jclass jcaller,
    jint blockReason,
    jint allowReason,
    jint snapshotDiff) {
  return JNI_TraceEvent_InstantAndroidToolbar(env, blockReason, allowReason, snapshotDiff);
}

static void JNI_TraceEvent_RegisterEnabledObserver(JNIEnv* env);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mpv4ixjM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TraceEvent_RegisterEnabledObserver(env);
}

static jlong JNI_TraceEvent_StartActivityDump(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& name,
    jlong dumpProtoPtr);

JNI_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MeYEuvyU(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong dumpProtoPtr) {
  return JNI_TraceEvent_StartActivityDump(env, base::android::JavaParamRef<jstring>(env, name),
      dumpProtoPtr);
}

static void JNI_TraceEvent_StartAsync(JNIEnv* env, const base::android::JavaParamRef<jstring>& name,
    jlong id);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M2Uq19aD(
    JNIEnv* env,
    jclass jcaller,
    jstring name,
    jlong id) {
  return JNI_TraceEvent_StartAsync(env, base::android::JavaParamRef<jstring>(env, name), id);
}

static void JNI_TraceEvent_StartupLaunchCause(JNIEnv* env, jlong activityId,
    jint launchCause);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MMXDXWdW(
    JNIEnv* env,
    jclass jcaller,
    jlong activityId,
    jint launchCause) {
  return JNI_TraceEvent_StartupLaunchCause(env, activityId, launchCause);
}

static void JNI_TraceEvent_StartupTimeToFirstVisibleContent2(JNIEnv* env, jlong activityId,
    jlong startTimeMs,
    jlong durationMs);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MfPu4ddG(
    JNIEnv* env,
    jclass jcaller,
    jlong activityId,
    jlong startTimeMs,
    jlong durationMs) {
  return JNI_TraceEvent_StartupTimeToFirstVisibleContent2(env, activityId, startTimeMs, durationMs);
}

static jboolean JNI_TraceEvent_ViewHierarchyDumpEnabled(JNIEnv* env);

JNI_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MEqw2S0B(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_TraceEvent_ViewHierarchyDumpEnabled(env);
}

static void JNI_TraceEvent_WebViewStartupStage1(JNIEnv* env, jlong startTimeMs,
    jlong durationMs);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M8maPXkg(
    JNIEnv* env,
    jclass jcaller,
    jlong startTimeMs,
    jlong durationMs) {
  return JNI_TraceEvent_WebViewStartupStage1(env, startTimeMs, durationMs);
}

static void JNI_TraceEvent_WebViewStartupStage2(JNIEnv* env, jlong startTimeMs,
    jlong durationMs,
    jboolean isColdStartup);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MLe5_00024ZGj(
    JNIEnv* env,
    jclass jcaller,
    jlong startTimeMs,
    jlong durationMs,
    jboolean isColdStartup) {
  return JNI_TraceEvent_WebViewStartupStage2(env, startTimeMs, durationMs, isColdStartup);
}

static void JNI_TraceEvent_WebViewStartupTotalFactoryInit(JNIEnv* env, jlong startTimeMs,
    jlong durationMs);

JNI_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MYRqQsc8(
    JNIEnv* env,
    jclass jcaller,
    jlong startTimeMs,
    jlong durationMs) {
  return JNI_TraceEvent_WebViewStartupTotalFactoryInit(env, startTimeMs, durationMs);
}


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_TraceEvent_dumpViewHierarchy2(nullptr);
static void Java_TraceEvent_dumpViewHierarchy(JNIEnv* env, jlong dumpProtoPtr,
    const base::android::JavaRef<jobject>& list) {
  jclass clazz = android_net_connectivity_org_chromium_base_TraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_TraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "dumpViewHierarchy",
          "(JLjava/lang/Object;)V",
          &g_android_net_connectivity_org_chromium_base_TraceEvent_dumpViewHierarchy2);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, dumpProtoPtr, list.obj());
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_TraceEvent_setEnabled1(nullptr);
static void Java_TraceEvent_setEnabled(JNIEnv* env, jboolean enabled) {
  jclass clazz = android_net_connectivity_org_chromium_base_TraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_TraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setEnabled",
          "(Z)V",
          &g_android_net_connectivity_org_chromium_base_TraceEvent_setEnabled1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_base_TraceEvent_setEventNameFilteringEnabled1(nullptr);
static void Java_TraceEvent_setEventNameFilteringEnabled(JNIEnv* env, jboolean enabled) {
  jclass clazz = android_net_connectivity_org_chromium_base_TraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_base_TraceEvent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setEventNameFilteringEnabled",
          "(Z)V",
          &g_android_net_connectivity_org_chromium_base_TraceEvent_setEventNameFilteringEnabled1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, enabled);
}

}  // namespace android
}  // namespace base

#endif  // android_net_connectivity_org_chromium_base_TraceEvent_JNI
