// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/net/AndroidTrafficStats

#ifndef android_net_connectivity_org_chromium_net_AndroidTrafficStats_JNI
#define android_net_connectivity_org_chromium_net_AndroidTrafficStats_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_net_AndroidTrafficStats[];
const char kClassPath_android_net_connectivity_org_chromium_net_AndroidTrafficStats[] =
    "android/net/connectivity/org/chromium/net/AndroidTrafficStats";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz_defined
#define android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_net_AndroidTrafficStats,
      &g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace net {
namespace android {
namespace traffic_stats {


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getCurrentUidRxBytes0(nullptr);
static jlong Java_AndroidTrafficStats_getCurrentUidRxBytes(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCurrentUidRxBytes",
          "()J",
          &g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getCurrentUidRxBytes0);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getCurrentUidTxBytes0(nullptr);
static jlong Java_AndroidTrafficStats_getCurrentUidTxBytes(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCurrentUidTxBytes",
          "()J",
          &g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getCurrentUidTxBytes0);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getTotalRxBytes0(nullptr);
static jlong Java_AndroidTrafficStats_getTotalRxBytes(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getTotalRxBytes",
          "()J",
          &g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getTotalRxBytes0);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getTotalTxBytes0(nullptr);
static jlong Java_AndroidTrafficStats_getTotalTxBytes(JNIEnv* env) {
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_AndroidTrafficStats_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getTotalTxBytes",
          "()J",
          &g_android_net_connectivity_org_chromium_net_AndroidTrafficStats_getTotalTxBytes0);

  jlong ret =
      env->CallStaticLongMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace traffic_stats
}  // namespace android
}  // namespace net

#endif  // android_net_connectivity_org_chromium_net_AndroidTrafficStats_JNI
