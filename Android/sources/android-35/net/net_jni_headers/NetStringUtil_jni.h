// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/net/NetStringUtil

#ifndef android_net_connectivity_org_chromium_net_NetStringUtil_JNI
#define android_net_connectivity_org_chromium_net_NetStringUtil_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_net_NetStringUtil[];
const char kClassPath_android_net_connectivity_org_chromium_net_NetStringUtil[] =
    "android/net/connectivity/org/chromium/net/NetStringUtil";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_net_NetStringUtil_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_net_NetStringUtil_clazz_defined
#define android_net_connectivity_org_chromium_net_NetStringUtil_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_NetStringUtil_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_net_NetStringUtil,
      &g_android_net_connectivity_org_chromium_net_NetStringUtil_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace net {
namespace android {


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicode2(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_NetStringUtil_convertToUnicode(JNIEnv* env,
    const base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  jclass clazz = android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "convertToUnicode",
          "(Ljava/nio/ByteBuffer;Ljava/lang/String;)Ljava/lang/String;",
          &g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicode2);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, text.obj(), charsetName.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicodeAndNormalize2(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_convertToUnicodeAndNormalize(JNIEnv* env, const
    base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  jclass clazz = android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "convertToUnicodeAndNormalize",
          "(Ljava/nio/ByteBuffer;Ljava/lang/String;)Ljava/lang/String;",
          &g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicodeAndNormalize2);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, text.obj(), charsetName.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicodeWithSubstitutions2(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_convertToUnicodeWithSubstitutions(JNIEnv* env, const
    base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  jclass clazz = android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "convertToUnicodeWithSubstitutions",
          "(Ljava/nio/ByteBuffer;Ljava/lang/String;)Ljava/lang/String;",
&g_android_net_connectivity_org_chromium_net_NetStringUtil_convertToUnicodeWithSubstitutions2);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, text.obj(), charsetName.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_NetStringUtil_toUpperCase1(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_NetStringUtil_toUpperCase(JNIEnv* env, const
    base::android::JavaRef<jstring>& str) {
  jclass clazz = android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env);
  CHECK_CLAZZ(env, clazz,
      android_net_connectivity_org_chromium_net_NetStringUtil_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "toUpperCase",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_android_net_connectivity_org_chromium_net_NetStringUtil_toUpperCase1);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, str.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace android
}  // namespace net

#endif  // android_net_connectivity_org_chromium_net_NetStringUtil_JNI
