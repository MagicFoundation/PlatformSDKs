// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     android/net/connectivity/org/chromium/net/DnsStatus

#ifndef android_net_connectivity_org_chromium_net_DnsStatus_JNI
#define android_net_connectivity_org_chromium_net_DnsStatus_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char
    kClassPath_android_net_connectivity_org_chromium_net_DnsStatus[];
const char kClassPath_android_net_connectivity_org_chromium_net_DnsStatus[] =
    "android/net/connectivity/org/chromium/net/DnsStatus";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_android_net_connectivity_org_chromium_net_DnsStatus_clazz(nullptr);
#ifndef android_net_connectivity_org_chromium_net_DnsStatus_clazz_defined
#define android_net_connectivity_org_chromium_net_DnsStatus_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_DnsStatus_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_android_net_connectivity_org_chromium_net_DnsStatus,
      &g_android_net_connectivity_org_chromium_net_DnsStatus_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace net {
namespace android {


static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_DnsStatus_getDnsServers0(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_DnsStatus_getDnsServers(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_net_DnsStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_net_DnsStatus_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDnsServers",
          "()[[B",
          &g_android_net_connectivity_org_chromium_net_DnsStatus_getDnsServers0);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_DnsStatus_getPrivateDnsActive0(nullptr);
static jboolean Java_DnsStatus_getPrivateDnsActive(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_net_DnsStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_net_DnsStatus_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getPrivateDnsActive",
          "()Z",
          &g_android_net_connectivity_org_chromium_net_DnsStatus_getPrivateDnsActive0);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_DnsStatus_getPrivateDnsServerName0(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_DnsStatus_getPrivateDnsServerName(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_net_DnsStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_net_DnsStatus_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getPrivateDnsServerName",
          "()Ljava/lang/String;",
          &g_android_net_connectivity_org_chromium_net_DnsStatus_getPrivateDnsServerName0);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_android_net_connectivity_org_chromium_net_DnsStatus_getSearchDomains0(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_DnsStatus_getSearchDomains(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = android_net_connectivity_org_chromium_net_DnsStatus_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      android_net_connectivity_org_chromium_net_DnsStatus_clazz(env), nullptr);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getSearchDomains",
          "()Ljava/lang/String;",
          &g_android_net_connectivity_org_chromium_net_DnsStatus_getSearchDomains0);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace android
}  // namespace net

#endif  // android_net_connectivity_org_chromium_net_DnsStatus_JNI
